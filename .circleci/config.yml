version: 2.1
description: DigitalOcean Kubernetes Engine Orb

orbs:
  doctl: digitalocean/cli@0.1.1
  k8s: digitalocean/k8s@0.1.1

commands:
  install:
    description: 'Install `doctl` and `kubectl` if not already installed.'
    steps:
      - doctl/install
      - k8s/install
  initialize:
    description: 'Initialize kubeconfig to connect to DigitalOcean Kubernetes Engine'
    parameters:
      cluster:
        description: 'The Kubernetes cluster name.'
        type: string
      digitalocean-access-token:
        default: DIGITALOCEAN_ACCESS_TOKEN
        description: The access token to connect DigitalOcean
        type: env_var_name
    steps:
      - doctl/initialize:
          digitalocean-access-token: <<parameters.digitalocean-access-token>>
      - run: |
          doctl kubernetes cluster kubeconfig save geekmotors-main-cluster

executors:
  digitalocean:
    description: |
      The official digitalocean docker container with doctl pre-installed
    docker:
      - image: digitalocean/doctl:<<parameters.sdk-version>>
    parameters:
      sdk-version:
        default: latest
        description: |
          What version of the Doctl Docker image? For full options, see https://hub.docker.com/r/digitalocean/doctl/tags
        type: string

jobs:
  #   build:
  #     machine: true
  #     steps:
  #       - checkout
  #       # build and push Docker image
  #       - run:
  #           name: BuildPushDockerImages
  #           command: |
  #             echo $CIRCLE_BUILD_NUM
  #             docker build -t jackula83/multi-client:latest -t jackula83/multi-client:$CIRCLE_BUILD_NUM ./client
  #             docker build -t jackula83/multi-server:latest -t jackula83/multi-server:$CIRCLE_BUILD_NUM ./server
  #             docker build -t jackula83/multi-worker:latest -t jackula83/multi-worker:$CIRCLE_BUILD_NUM ./worker
  #             echo $DOCKERHUB_PASSWORD | docker login -u $DOCKER_USER --password-stdin docker.io
  #             docker push jackula83/multi-client:latest
  #             docker push jackula83/multi-server:latest
  #             docker push jackula83/multi-worker:latest
  #             docker push jackula83/multi-client:$CIRCLE_BUILD_NUM
  #             docker push jackula83/multi-server:$CIRCLE_BUILD_NUM
  #             docker push jackula83/multi-worker:$CIRCLE_BUILD_NUM

  install_and_initialize_cli:
    description: |
      Install doctl and initialize to connect to DigitalOcean
    cluster: <<parameters.cluster>>
    executor: <<parameters.executor>>
    parameters:
      cluster:
        description: 'The Kubernetes cluster name.'
        type: string
      digitalocean-access-token:
        default: DIGITALOCEAN_ACCESS_TOKEN
        description: The access token to connect DigitalOcean
        type: env_var_name
      executor:
        default: digitalocean
        description: |
          Executor to use for this job. Defaults to this orb's default executor.
        type: executor
    steps:
      - install
      - initialize:
          cluster: geekmotors-main-cluster
          digitalocean-access-token: $DIGITALOCEAN_ACCESS_TOKEN

  deploy:
    description: Deploy application to DigitalOcean Kubernetes
    machine: true
    steps:
      - checkout
      # Configure and apply all k8s config files
      - run:
          name: ApplyK8sConfig
          command: |
            doctl kubernetes cluster kubeconfig save geekmotors-main-cluster
            kubectl apply -f k8s
      - run: echo $CIRCLE_BUILD_NUM
      # Update a deployment Docker images.
      - run:
          name: UpdateDeployments
          command: |
            doctl kubernetes cluster kubeconfig save geekmotors-main-cluster
            kubectl set image deployment/server-deployment server=jackula83/multi-server:latest
            kubectl set image deployment/client-deployment client=jackula83/multi-client:latest
            kubectl set image deployment/worker-deployment worker=jackula83/multi-worker:latest

workflows:
  build_update_deploy:
    jobs:
      # - build
      - install_and_initialize_cli
      # - deploy:
      #     requires:
      #       - install_and_initialize_cli
      #   - build
